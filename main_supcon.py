from __future__ import print_function

import os
import sys
import argparse
import time
import math
import random
import numpy as np

#import tensorboard_logger as tb_logger
import torch
import torch.backends.cudnn as cudnn
from sklearn import metrics
from torchvision import transforms, datasets
from torch.utils.data import Subset

from util import TwoCropTransform, AverageMeter
from util import adjust_learning_rate, warmup_learning_rate
from util import set_optimizer, save_model
from networks.resnet_big import SupConResNet
from losses import SupConLoss
from balancedbatchsampler import BalancedBatchSampler
from mycifar10 import MyCIFAR10
from mydataset import MyDataset
from NCE import NCEAverage, NCECriterion, un_NCEAverage
#from NCE import new_NCECriterion_1 as NCECriterion
from center_loss import CenterLoss
from test import test,val

try:
    import apex
    from apex import amp, optimizers
except ImportError:
    pass


def parse_option():
    parser = argparse.ArgumentParser('argument for training')

    parser.add_argument('--print_freq', type=int, default=50,
                        help='print frequency')
    parser.add_argument('--save_freq', type=int, default=50,
                        help='save frequency')
    parser.add_argument('--test', type=int, default=False,
                        help='running model on test and val dataset')
    parser.add_argument('--test_freq', type=int, default=10,
                        help='test frequency')
    parser.add_argument('--batch_size', type=int, default=256,
                        help='batch_size')
    parser.add_argument('--num_workers', type=int, default=32,
                        help='num of workers to use')
    parser.add_argument('--epochs', type=int, default=1000,
                        help='number of training epochs')
    parser.add_argument('--num_unknown', type=int, default=1,
                        help='number of unknown classes generated by generator')

    # optimization
    parser.add_argument('--learning_rate', type=float, default=0.05,
                        help='learning rate')
    parser.add_argument('--lr_decay_epochs', type=str, default='100,240,320',
                        help='where to decay lr, can be a list')
    parser.add_argument('--lr_decay_rate', type=float, default=0.1,
                        help='decay rate for learning rate')
    parser.add_argument('--weight_decay', type=float, default=1e-4,
                        help='weight decay')
    parser.add_argument('--momentum', type=float, default=0.9,
                        help='momentum')

    # model dataset
    parser.add_argument('--model', type=str, default='resnet50')
    parser.add_argument('--root', type=str, default='/export/data/zqs/Data/HiFiMask-Challenge/phase1/',
                        help='path of dataset')
    parser.add_argument('--dataset', type=str, default='mydataset',
                        choices=['cifar10', 'cifar100', 'path'], help='dataset')
    parser.add_argument('--mean', type=str, help='mean of dataset in path in form of str tuple')
    parser.add_argument('--std', type=str, help='std of dataset in path in form of str tuple')
    parser.add_argument('--data_folder', type=str, default=None, help='path to custom dataset')
    parser.add_argument('--size', type=int, default=32, help='parameter for RandomResizedCrop')

    # method
    parser.add_argument('--method', type=str, default='SupCon',
                        choices=['SupCon', 'SimCLR'], help='choose method')

    # temperature
    parser.add_argument('--temp', type=float, default=0.07,
                        help='temperature for loss function')

    # other setting
    parser.add_argument('--cosine', action='store_true',
                        help='using cosine annealing')
    parser.add_argument('--syncBN', action='store_true',
                        help='using synchronized batch normalization')
    parser.add_argument('--warm', action='store_true',
                        help='warm-up for large batch training')
    parser.add_argument('--trial', type=str, default='0',
                        help='id for recording multiple runs')

    opt = parser.parse_args()

    # check if dataset is path that passed required arguments
    if opt.dataset == 'path':
        assert opt.data_folder is not None \
            and opt.mean is not None \
            and opt.std is not None

    # set the path according to the environment
    if opt.data_folder is None:
        opt.data_folder = './datasets/'
    opt.model_path = './save/SupCon/{}_models'.format(opt.dataset)
    opt.tb_path = './save/SupCon/{}_tensorboard'.format(opt.dataset)

    iterations = opt.lr_decay_epochs.split(',')
    opt.lr_decay_epochs = list([])
    for it in iterations:
        opt.lr_decay_epochs.append(int(it))

    opt.model_name = '{}_{}_{}_lr_{}_decay_{}_bsz_{}_temp_{}_trial_{}'.\
        format(opt.method, opt.dataset, opt.model, opt.learning_rate,
               opt.weight_decay, opt.batch_size, opt.temp, opt.trial)

    if opt.cosine:
        opt.model_name = '{}_cosine'.format(opt.model_name)

    # warm-up for large-batch training,
    if opt.batch_size > 96:
        opt.warm = True
    if opt.warm:
        opt.model_name = '{}_warm'.format(opt.model_name)
        opt.warmup_from = 0.01
        opt.warm_epochs = 2
        if opt.cosine:
            eta_min = opt.learning_rate * (opt.lr_decay_rate ** 3)
            opt.warmup_to = eta_min + (opt.learning_rate - eta_min) * (
                    1 + math.cos(math.pi * opt.warm_epochs / opt.epochs)) / 2
        else:
            opt.warmup_to = opt.learning_rate

    opt.tb_folder = os.path.join(opt.tb_path, opt.model_name)
    if not os.path.isdir(opt.tb_folder):
        os.makedirs(opt.tb_folder)

    opt.save_folder = os.path.join(opt.model_path, opt.model_name)
    if not os.path.isdir(opt.save_folder):
        os.makedirs(opt.save_folder)

    return opt


def set_loader(opt):
    random.seed(60)
    # construct data loader
    if opt.dataset == 'cifar10':
        mean = (0.4914, 0.4822, 0.4465)
        std = (0.2023, 0.1994, 0.2010)
    elif opt.dataset == 'cifar100':
        mean = (0.5071, 0.4867, 0.4408)
        std = (0.2675, 0.2565, 0.2761)
    elif opt.dataset == 'mydataset':
        mean = (0.5355, 0.4629, 0.4228)
        std = (0.2661, 0.2589, 0.2607)
    else:
        raise ValueError('dataset not supported: {}'.format(opt.dataset))
    normalize = transforms.Normalize(mean=mean, std=std)

    train_transform = transforms.Compose([
        transforms.RandomResizedCrop(size=64, scale=(0.2, 1.)),
        transforms.RandomHorizontalFlip(),
        transforms.RandomApply([
            transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)
        ], p=0.8),
        transforms.RandomGrayscale(p=0.2),
        transforms.ToTensor(),
        normalize,
    ])

    if opt.dataset == 'cifar10':
        train_dataset = MyCIFAR10(root=opt.data_folder, train=True,
                                  transform=train_transform,
                                  download=True)

        classes_original_order = train_dataset.classes
        #opt.random_indices = [9, 4, 5, 6, 7, 8]
        opt.random_indices = random.sample(range(10), 6)
        classes = [train_dataset.classes[i] for i in opt.random_indices]
        opt.original_index = [classes_original_order.index(i) for i in classes]
        opt.num_classes = len(classes)
        
        indices_train = np.argwhere([np.array(train_dataset.targets) == i for i in opt.random_indices])[:,1]
        train_dataset = Subset(train_dataset, indices_train)
        opt.ndata = len(train_dataset)
        opt.sample_per_class = opt.batch_size // opt.num_classes
        balanced_batch_sampler = BalancedBatchSampler(train_dataset, len(opt.random_indices), opt.batch_size // len(opt.random_indices))

        print("CIFAR-10 dataset is loaded with closed set samples from ", classes, "indices: ", opt.random_indices)
   
    elif opt.dataset == 'mydataset':
        train_data = MyDataset(root=opt.root, txt='train_label.txt', transform=train_transform)

        classes_original_order = 2
        opt.random_indices = [0, 1]
        classes = ['fake', 'real']
        opt.original_index = [0, 1]
        opt.num_classes = len(classes)

        opt.ndata = len(train_data)
        opt.sample_per_class = opt.batch_size // opt.num_classes
        balanced_batch_sampler = BalancedBatchSampler(train_data, len(opt.random_indices), opt.batch_size // len(opt.random_indices))

        print("Dataset is loaded with closed set samples from ", classes, "indices: ", opt.random_indices)

    elif opt.dataset == 'cifar100':
        train_dataset = datasets.CIFAR100(root=opt.data_folder,
                                          transform=TwoCropTransform(train_transform),
                                          download=True)
    elif opt.dataset == 'path':
        train_dataset = datasets.ImageFolder(root=opt.data_folder,
                                            transform=TwoCropTransform(train_transform))
    else:
        raise ValueError(opt.dataset)

    train_sampler = None
    train_loader = torch.utils.data.DataLoader(train_data, batch_sampler=balanced_batch_sampler, num_workers=opt.num_workers, pin_memory=True)

    return train_loader


def set_test_loader(opt):
    # construct data loader
    if opt.dataset == 'cifar10':
        mean = (0.4914, 0.4822, 0.4465)
        std = (0.2023, 0.1994, 0.2010)
    elif opt.dataset == 'cifar100':
        mean = (0.5071, 0.4867, 0.4408)
        std = (0.2675, 0.2565, 0.2761)
    elif opt.dataset == 'mydataset':
        mean = (0.5355, 0.4629, 0.4228)
        std = (0.2661, 0.2589, 0.2607)
    else:
        raise ValueError('dataset not supported: {}'.format(opt.dataset))
    normalize = transforms.Normalize(mean=mean, std=std)

    loader_transform = transforms.Compose([transforms.RandomResizedCrop(size=64, scale=(0.2, 1.)), transforms.ToTensor(), normalize])

    if opt.dataset == 'cifar10':
        ordered_train_dataset = MyCIFAR10(root=opt.data_folder, train=True,
                                          transform=loader_transform,
                                          download=True)
        classes_original_order = ordered_train_dataset.classes
        indices_train = np.argwhere([np.array(ordered_train_dataset.targets) == i for i in opt.random_indices])[:,1]
        ordered_train_dataset = Subset(ordered_train_dataset, indices_train)

        test_dataset = MyCIFAR10(root=opt.data_folder, train=False,
                                transform=loader_transform,
                                download=True)
    
    elif opt.dataset == 'mydataset':
        test_root = '/opt/cephfs_workspace/gpudisk/Qiusheng/Data/HiFiChallenge/phase2'
        ordered_train_dataset = MyDataset(root=opt.root, txt='train_label.txt', transform=loader_transform, train=True)
        val_dataset = MyDataset(root=opt.root, txt='val.txt', transform=loader_transform)
        test_dataset = MyDataset(root=test_root, txt='test.txt', transform=loader_transform, train=False)


    elif opt.dataset == 'cifar100':
        train_dataset = datasets.CIFAR100(root=opt.data_folder,
                                          transform=TwoCropTransform(train_transform),
                                          download=True)
    elif opt.dataset == 'path':
        train_dataset = datasets.ImageFolder(root=opt.data_folder,
                                            transform=TwoCropTransform(train_transform))
    else:
        raise ValueError(opt.dataset)

    ordered_train_loader = torch.utils.data.DataLoader(
        ordered_train_dataset, batch_size=30, shuffle=False,
        num_workers=opt.num_workers, pin_memory=True)

    val_loader = torch.utils.data.DataLoader(
        val_dataset, batch_size=30, shuffle=False,
        num_workers=opt.num_workers, pin_memory=True)
    test_loader = torch.utils.data.DataLoader(
        test_dataset, batch_size=30, shuffle=False,
        num_workers=opt.num_workers, pin_memory=True)

    return test_loader, ordered_train_loader, val_loader


def set_model(opt, path_weights):
    model = SupConResNet(name=opt.model)
    checkpoint = torch.load(path_weights, map_location='cpu')
    model.load_state_dict(checkpoint)
    #average = un_NCEAverage.NCEAverage(128, opt.ndata, opt.sample_per_class, opt.temp, opt.num_classes, num_unknown=opt.num_unknown)
    average = NCEAverage.NCEAverage(128, opt.ndata, opt.sample_per_class, opt.temp, opt.num_classes)
    criterion = NCECriterion.NCECriterion(opt.ndata)

    # enable synchronized Batch Normalization
    if opt.syncBN:
        model = apex.parallel.convert_syncbn_model(model)

    if torch.cuda.is_available():
        if torch.cuda.device_count() > 1:
            model.encoder = torch.nn.DataParallel(model.encoder)
        model = model.cuda()
        criterion = criterion.cuda()
        average = average.cuda()
        cudnn.benchmark = True

    return model, criterion, average


def train(train_loader, model, criterion, average, optimizer, epoch, opt):
    """one epoch training"""
    model.train()

    batch_time = AverageMeter()
    data_time = AverageMeter()
    losses = AverageMeter()

    end = time.time()
    for i, (images, labels, _) in enumerate(train_loader):
        data_time.update(time.time() - end)

        # modify labels with their new indexes - we are not using all the labels anymore at the training
        for ind, label in enumerate(labels):
            labels[ind] = opt.original_index.index(label)

        # images = torch.cat([images[0], images[1]], dim=0)
        if torch.cuda.is_available():
            images = images.cuda(non_blocking=True)
            labels = labels.cuda(non_blocking=True)
            #idxs   = idxs.cuda(non_blocking=True)
        bsz = labels.shape[0]

        # warm-up learning rate
        warmup_learning_rate(opt, epoch, i, len(train_loader), optimizer)

        # compute loss
        features, _ = model(images)
        bs = features.size(0)
        outs, prob = average(features, i)
        loss = criterion(outs)

        # update metric
        losses.update(loss.item(), bsz)

        # SGD
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # measure elapsed time
        batch_time.update(time.time() - end)
        end = time.time()

        # print info
        if (i + 1) % opt.print_freq == 0:
            print('Train: [{0}][{1}/{2}]\t'
                  'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                  'DT {data_time.val:.3f} ({data_time.avg:.3f})\t'
                  'loss {loss.val:.3f} ({loss.avg:.3f})'.format(
                   epoch, i + 1, len(train_loader), batch_time=batch_time,
                   data_time=data_time, loss=losses))
            sys.stdout.flush()

    return losses.avg

def main():
    opt = parse_option()
    path_weights = './weights/exp5/ckpt_epoch_245_0.9949761342610456.pth'

    # build data loader
    train_loader = set_loader(opt)
    test_loader, ordered_train_loader, val_loader = set_test_loader(opt)

    # build model and criterion
    model, criterion, average = set_model(opt, path_weights)
    model.load_state_dict(torch.load(path_weights))

    # build optimizer
    optimizer = set_optimizer(opt, model)

    if opt.test:
        model.load_state_dict(torch.load(path_weights))
        test(test_loader, ordered_train_loader, model, 0, opt)
        val(val_loader, ordered_train_loader, model, 0, opt)

    else:
        # training routine
        best_score = 0.5
        for epoch in range(1, opt.epochs + 1):
            adjust_learning_rate(opt, optimizer, epoch)

            # train for one epoch
            time1 = time.time()
            loss = train(train_loader, model, criterion, average, optimizer, epoch, opt)
            time2 = time.time()
            print('epoch {}, total time {:.2f}'.format(epoch, time2 - time1))

            if epoch % opt.test_freq == 0:
                epoch_score = val(val_loader, ordered_train_loader, model, epoch, opt)
                if epoch_score > best_score:
                    best_score = epoch_score
                    save_path = './weights/exp1'
                    os.makedirs(save_path)
                    save_file_enc= os.path.join('save_path', 'ckpt_epoch_{epoch}_{score}.pth'.format(epoch=epoch, score=best_score))
                    torch.save(model.state_dict(), save_file_enc)
                    print('**********************')
                    print('weights saved to ./weights/exp5/ckpt_epoch_{epoch}_{score}.pth'.format(epoch=epoch, score=best_score))
                    print('**********************')



if __name__ == '__main__':
    main()
